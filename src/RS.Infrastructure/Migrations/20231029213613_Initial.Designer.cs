// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RS.Infrastructure;

#nullable disable

namespace RS.Infrastructure.Migrations
{
    [DbContext(typeof(RecommendationSystemDbContext))]
    [Migration("20231029213613_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RS.Domain.Apartament", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ApartmentStatus")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<bool>("BrokerCommission")
                        .HasColumnType("bit");

                    b.Property<string>("ConstructionType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PermissionForUse")
                        .HasColumnType("bit");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("PricePerSqM")
                        .HasPrecision(18, 2)
                        .HasColumnType("float(18)");

                    b.Property<string>("PropertyType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Quadrature")
                        .HasColumnType("int");

                    b.Property<int>("YearOfConstruction")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Apartaments");
                });

            modelBuilder.Entity("RS.Domain.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<long>("LocationId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("LocationId")
                        .IsUnique();

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("RS.Domain.Floor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ApartamentId")
                        .HasColumnType("bigint");

                    b.Property<int>("ApartmentFloor")
                        .HasColumnType("int");

                    b.Property<int>("TotalFloorsInBuilding")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ApartamentId")
                        .IsUnique();

                    b.ToTable("Floors");
                });

            modelBuilder.Entity("RS.Domain.Location", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ApartamentId")
                        .HasColumnType("bigint");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("StreetAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("ApartamentId")
                        .IsUnique();

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("RS.Domain.City", b =>
                {
                    b.HasOne("RS.Domain.Location", "Location")
                        .WithOne("City")
                        .HasForeignKey("RS.Domain.City", "LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("RS.Domain.Floor", b =>
                {
                    b.HasOne("RS.Domain.Apartament", "Apartament")
                        .WithOne("Floor")
                        .HasForeignKey("RS.Domain.Floor", "ApartamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartament");
                });

            modelBuilder.Entity("RS.Domain.Location", b =>
                {
                    b.HasOne("RS.Domain.Apartament", "Apartament")
                        .WithOne("Location")
                        .HasForeignKey("RS.Domain.Location", "ApartamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Apartament");
                });

            modelBuilder.Entity("RS.Domain.Apartament", b =>
                {
                    b.Navigation("Floor")
                        .IsRequired();

                    b.Navigation("Location")
                        .IsRequired();
                });

            modelBuilder.Entity("RS.Domain.Location", b =>
                {
                    b.Navigation("City")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
